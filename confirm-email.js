const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes do Supabase
const supabaseUrl = 'https://fvmkpwouqxnhtmlydjui.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ2bWtwd291cXhuaHRtbHlkanVpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI4NTM4NTAsImV4cCI6MjA2ODQyOTg1MH0.40A7LIRzqSkINx_LYibqvuBkx6cLIo5-qPn3j9VWAm8';

// Para confirmar email, precisamos da service role key
// Esta √© uma chave de exemplo - voc√™ precisa da sua service role key real
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || 'sua_service_role_key_aqui';

// Criar cliente Supabase com service role para opera√ß√µes administrativas
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Criar cliente normal para testes
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkUserStatus() {
  console.log('üîç Verificando status do usu√°rio...');
  
  try {
    // Tentar fazer login para ver o erro espec√≠fico
    const { data, error } = await supabase.auth.signInWithPassword({
      email: 'jose_evilanio@hotmail.com',
      password: 'Mae@2106'
    });
    
    if (error) {
      console.log('‚ùå Erro no login:', error.message);
      console.log('C√≥digo do erro:', error.status);
      
      if (error.message.includes('Email not confirmed')) {
        console.log('\nüìß O email n√£o foi confirmado. Vamos tentar resolver isso...');
        return 'email_not_confirmed';
      }
      
      return 'other_error';
    }
    
    if (data.user) {
      console.log('‚úÖ Login realizado com sucesso!');
      console.log('Email confirmado:', data.user.email_confirmed_at ? 'Sim' : 'N√£o');
      return 'success';
    }
    
  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
    return 'unexpected_error';
  }
}

async function confirmEmailManually() {
  console.log('\nüîß Tentando confirmar email manualmente...');
  
  try {
    // M√©todo 1: Usar Admin API para confirmar email
    const { data, error } = await supabaseAdmin.auth.admin.updateUserById(
      'd2474a88-ecdf-426e-8599-dda82f58141f', // ID do usu√°rio
      { email_confirm: true }
    );
    
    if (error) {
      console.log('‚ùå Erro ao confirmar email via Admin API:', error);
      return false;
    }
    
    console.log('‚úÖ Email confirmado via Admin API:', data);
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro inesperado ao confirmar email:', error);
    return false;
  }
}

async function resendConfirmationEmail() {
  console.log('\nüìß Reenviando email de confirma√ß√£o...');
  
  try {
    const { data, error } = await supabase.auth.resend({
      type: 'signup',
      email: 'jose_evilanio@hotmail.com'
    });
    
    if (error) {
      console.log('‚ùå Erro ao reenviar email:', error);
      return false;
    }
    
    console.log('‚úÖ Email de confirma√ß√£o reenviado:', data);
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro inesperado ao reenviar email:', error);
    return false;
  }
}

async function createNewUserWithConfirmedEmail() {
  console.log('\nüë§ Criando novo usu√°rio com email j√° confirmado...');
  
  try {
    // Primeiro, deletar o usu√°rio existente se poss√≠vel
    console.log('Tentando deletar usu√°rio existente...');
    
    // Criar novo usu√°rio com email confirmado
    const { data, error } = await supabaseAdmin.auth.admin.createUser({
      email: 'jose_evilanio@hotmail.com',
      password: 'Mae@2106',
      email_confirm: true, // Confirmar email automaticamente
      user_metadata: {
        name: 'Jos√© Evil√¢nio'
      }
    });
    
    if (error) {
      console.log('‚ùå Erro ao criar usu√°rio:', error);
      return false;
    }
    
    console.log('‚úÖ Usu√°rio criado com email confirmado:', data.user.id);
    
    // Inserir dados na tabela users
    const { error: userError } = await supabase
      .from('users')
      .upsert([{
        id: data.user.id,
        email: 'jose_evilanio@hotmail.com',
        name: 'Jos√© Evil√¢nio'
      }]);
    
    if (userError) {
      console.log('‚ö†Ô∏è Erro ao inserir na tabela users:', userError);
    } else {
      console.log('‚úÖ Dados inseridos na tabela users');
    }
    
    // Criar perfil
    const { error: profileError } = await supabase
      .from('profiles')
      .upsert([{
        id: data.user.id,
        bio: 'Usu√°rio do sistema'
      }]);
    
    if (profileError) {
      console.log('‚ö†Ô∏è Erro ao criar perfil:', profileError);
    } else {
      console.log('‚úÖ Perfil criado');
    }
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro inesperado ao criar usu√°rio:', error);
    return false;
  }
}

async function disableEmailConfirmation() {
  console.log('\n‚öôÔ∏è Informa√ß√µes sobre configura√ß√£o do Supabase...');
  console.log('Para desabilitar a confirma√ß√£o de email:');
  console.log('1. Acesse o Dashboard do Supabase');
  console.log('2. V√° para Authentication > Settings');
  console.log('3. Desabilite "Enable email confirmations"');
  console.log('4. Salve as configura√ß√µes');
  console.log('\nOu use a configura√ß√£o via c√≥digo no projeto.');
}

async function runEmailConfirmationFix() {
  console.log('üöÄ Iniciando corre√ß√£o do problema de confirma√ß√£o de email...\n');
  
  // Verificar status atual
  const status = await checkUserStatus();
  
  if (status === 'success') {
    console.log('\nüéâ Usu√°rio j√° est√° funcionando corretamente!');
    return;
  }
  
  if (status !== 'email_not_confirmed') {
    console.log('\n‚ùå Problema diferente de confirma√ß√£o de email. Verifique os logs acima.');
    return;
  }
  
  console.log('\nüîÑ Tentando diferentes solu√ß√µes...');
  
  // Tentar confirmar email manualmente (requer service role key)
  if (supabaseServiceKey !== 'sua_service_role_key_aqui') {
    const confirmed = await confirmEmailManually();
    if (confirmed) {
      console.log('\n‚úÖ Email confirmado! Testando login...');
      const newStatus = await checkUserStatus();
      if (newStatus === 'success') {
        console.log('üéâ Problema resolvido!');
        return;
      }
    }
  } else {
    console.log('‚ö†Ô∏è Service role key n√£o fornecida. Pulando confirma√ß√£o manual.');
  }
  
  // Tentar reenviar email de confirma√ß√£o
  await resendConfirmationEmail();
  
  // Mostrar informa√ß√µes sobre configura√ß√£o
  await disableEmailConfirmation();
  
  console.log('\nüìã RESUMO DAS SOLU√á√ïES:');
  console.log('1. ‚úÖ Forne√ßa a service role key para confirma√ß√£o autom√°tica');
  console.log('2. ‚úÖ Desabilite confirma√ß√£o de email no Dashboard do Supabase');
  console.log('3. ‚úÖ Verifique seu email para link de confirma√ß√£o');
  console.log('4. ‚úÖ Use o script com service role key para criar usu√°rio confirmado');
}

// Executar corre√ß√£o
runEmailConfirmationFix();